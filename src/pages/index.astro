---
import '../styles/global.css';
---

<html lang="ja">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Roland Piano 比較 | プロフェッショナル・キーボード分析</title>
		<link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;600;700&family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	</head>
	<body class="bg-dark-bg text-white overflow-x-hidden">
		<!-- Header -->
		<header class="fixed w-full top-0 z-50 header-bg border-b border-dark-border/30">
			<div class="max-w-7xl mx-auto px-6 lg:px-8">
				<div class="flex justify-between items-center py-4">
					<div class="flex items-center space-x-4">
						<h1 class="text-xl font-bold gradient-text">Roland Piano Hub</h1>
					</div>
					<nav class="hidden md:flex space-x-8">
						<button data-section="hero" class="nav-btn text-gray-300 hover:text-white transition-colors text-sm">ホーム</button>
						<button data-section="rd2000" class="nav-btn text-gray-300 hover:text-white transition-colors text-sm">RD-2000</button>
						<button data-section="fantom" class="nav-btn text-gray-300 hover:text-white transition-colors text-sm">FANTOM-08</button>
						<button data-section="fp90x" class="nav-btn text-gray-300 hover:text-white transition-colors text-sm">FP-90x</button>
						<button data-section="comparison" class="nav-btn text-gray-300 hover:text-white transition-colors text-sm">比較</button>
					</nav>
				</div>
			</div>
		</header>

		<!-- Progress Bar -->
		<div class="fixed top-0 left-0 w-full h-1 bg-dark-border z-50">
			<div id="progress-bar" class="h-full bg-gradient-to-r from-accent-blue via-accent-purple to-accent-cyan transition-all duration-300 ease-out" style="width: 0%"></div>
		</div>

		<!-- Main Container -->
		<div class="scroll-container" style="height: 500vh;">
			
			<!-- Fixed Content Area -->
			<div class="fixed inset-0 flex items-center justify-center">
				
				<!-- Hero Section -->
				<section id="hero" class="section-content active absolute inset-0 flex items-center justify-center">
					<div class="absolute inset-0 bg-gradient-to-br from-dark-bg via-dark-card to-dark-bg"></div>
					<div class="absolute inset-0 opacity-20">
						<div class="absolute top-20 left-20 w-64 h-64 bg-accent-blue/10 rounded-full blur-3xl animate-pulse"></div>
						<div class="absolute bottom-20 right-20 w-96 h-96 bg-accent-purple/10 rounded-full blur-3xl animate-pulse"></div>
						<div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-accent-cyan/10 rounded-full blur-3xl animate-pulse"></div>
					</div>
					<div class="relative text-center px-6 max-w-6xl mx-auto">
						<div class="mb-12">
							<h2 class="hero-title text-4xl md:text-7xl font-light mb-8 tracking-tight opacity-0" style="transform: translateY(30px);">
								<span class="font-semibold">あなた好みの</span>
								<span class="gradient-text font-semibold">STAGE PIANO</span>
							</h2>
							<p class="hero-subtitle text-0.5xl md:text-1.5xl text-gray-300 mb-8 font-light leading-relaxed opacity-0" style="transform: translateY(30px);">
								Roland の革新的なキーボードテクノロジーが<br />
								あなたの創造性を解き放つ
							</p>
						</div>
						
						<!-- Piano Preview Cards -->
						<div class="hero-cards grid md:grid-cols-3 gap-6 mb-12 opacity-0" style="transform: translateY(30px);">
							<div class="glass-card rounded-2xl p-6 hover:scale-105 transition-all duration-300 cursor-pointer piano-preview piano-preview-rd2000" data-target="rd2000">
								<div class="aspect-video bg-gradient-to-br from-accent-red/20 to-transparent rounded-xl mb-4 overflow-hidden">
									<img src="/Images/rd-2000_main 2.png" alt="RD-2000" class="w-full h-full object-cover">
								</div>
								<h3 class="text-lg font-semibold text-accent-red mb-2">RD-2000</h3>
								<p class="text-sm font-semibold text-gray-500">圧倒的なリアルな演奏体験</p>
							</div>
							<div class="glass-card rounded-2xl p-6 hover:scale-105 transition-all duration-300 cursor-pointer piano-preview piano-preview-fantom" data-target="fantom">
								<div class="aspect-video bg-gradient-to-br from-accent-purple/20 to-transparent rounded-xl mb-4 overflow-hidden">
									<img src="/Images/fantom-08_lineup_top 1.png" alt="FANTOM-08" class="w-full h-full object-cover">
								</div>
								<h3 class="text-lg font-semibold text-accent-purple mb-2">FANTOM-08</h3>
								<p class="text-sm font-semibold text-gray-500">万能バランスタイプ</p>
							</div>
							<div class="glass-card rounded-2xl p-6 hover:scale-105 transition-all duration-300 cursor-pointer piano-preview piano-preview-fp90x" data-target="fp90x">
								<div class="aspect-video bg-gradient-to-br from-accent-cyan/20 to-transparent rounded-xl mb-4 overflow-hidden">
									<img src="/Images/lineup_fp-90x 1.png" alt="FP-90x" class="w-full h-full object-cover">
								</div>
								<h3 class="text-lg font-semibold text-accent-cyan mb-2">FP-90x</h3>
								<p class="text-sm font-semibold text-gray-500">演奏体験+可動性</p>
							</div>
						</div>
						
						<div class="hero-scroll-indicator flex flex-col items-center opacity-0 mt-8" style="transform: translateY(30px);">
							<div class="scroll-indicator-container">
								<div class="scroll-chevrons">
									<div class="chevron"></div>
									<div class="chevron"></div>
									<div class="chevron"></div>
								</div>
								<span class="scroll-text">scroll</span>
							</div>
						</div>
					</div>
				</section>

				<!-- RD-2000 Section -->
				<section id="rd2000" class="section-content absolute inset-0 flex items-center">
					<div class="absolute inset-0 bg-gradient-to-br from-accent-blue/10 to-dark-bg"></div>
					<div class="rd2000-world-ambience"></div>
					<div class="noise-overlay"></div>
					<div class="rd2000-highlight"></div>
					<div class="max-w-7xl mx-auto px-6 lg:px-8 w-full h-full flex flex-col justify-center">
						<!-- Header -->
						<div class="piano-header opacity-0 transform translate-y-[30px] mb-6 mt-12 max-w-4xl">
							<div class="text-xs font-medium tracking-wider uppercase mb-1" style="color: #ef4444;">Stage Piano</div>
							<h3 class="text-3xl md:text-4xl font-bold mb-2">
								RD-<span class="rd2000-gradient-text">2000</span>
							</h3>
							<p class="text-base font-medium" style="color: #ef4444;">
								グランド同等のリアルな演奏体験を
							</p>
						</div>
						
						<!-- Main Content -->
						<div class="grid lg:grid-cols-2 gap-16 items-center mb-8">
							<!-- Piano Image -->
							<div class="piano-image opacity-0 transform translate-x-[-50px]">
								<div class="relative group">
									<div class="absolute inset-0 bg-gradient-to-br from-accent-blue/20 to-accent-blue/5 rounded-2xl blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
									<img src="/Images/rd-2000_main 2.png" alt="Roland RD-2000" class="relative w-full h-auto rounded-2xl shadow-2xl">
								</div>
							</div>
							
							<!-- Radar Chart -->
							<div class="piano-chart opacity-0 transform translate-x-[50px]">
								<div class="relative">
									<div class="radar-container-medium">
										<canvas id="rd2000Chart"></canvas>
									</div>
								</div>
							</div>
						</div>
						
						<!-- Performance Score Table -->
						<div class="piano-scores opacity-0 transform translate-y-[30px] flex justify-center">
							<div class="score-table-bg-rd2000 py-2 px-6 rounded-xl" style="box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1), 0 0 80px rgba(239, 68, 68, 0.1);">
								<div class="grid grid-cols-6 gap-4 max-w-2xl">
									<div class="text-center score-item">
										<div class="text-lg font-bold mb-1" style="color: #ef4444;">5.5</div>
										<div class="text-xs text-gray-400">タッチ</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold mb-1" style="color: #ef4444;">4.5</div>
										<div class="text-xs text-gray-400">音色</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold mb-1" style="color: #ef4444;">4.0</div>
										<div class="text-xs text-gray-400">機能</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold mb-1" style="color: #ef4444;">3.5</div>
										<div class="text-xs text-gray-400">拡張性</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold mb-1" style="color: #ef4444;">3.0</div>
										<div class="text-xs text-gray-400">携帯性</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold mb-1" style="color: #ef4444;">3.0</div>
										<div class="text-xs text-gray-400">コスパ</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</section>

				<!-- FANTOM-08 Section -->
				<section id="fantom" class="section-content absolute inset-0 flex items-center">
					<div class="absolute inset-0 bg-gradient-to-br from-accent-purple/10 to-dark-bg"></div>
					<div class="fantom-world-ambience"></div>
					<div class="noise-overlay"></div>
					<div class="fantom-highlight"></div>
					<div class="max-w-7xl mx-auto px-6 lg:px-8 w-full h-full flex flex-col justify-center">
						<!-- Header -->
						<div class="piano-header opacity-0 transform translate-y-[30px] mb-6 mt-12 max-w-4xl">
							<div class="text-accent-purple text-xs font-medium tracking-wider uppercase mb-1">Workstation</div>
							<h3 class="text-3xl md:text-4xl font-bold mb-2">
								FANTOM-<span class="fantom-gradient-text">08</span>
							</h3>
							<p class="text-base text-accent-purple font-medium">
								多様な音作りと自由な演奏を
							</p>
						</div>
						
						<!-- Main Content -->
						<div class="grid lg:grid-cols-2 gap-16 items-center mb-8">
							<!-- Piano Image -->
							<div class="piano-image opacity-0 transform translate-x-[-50px]">
								<div class="relative group">
									<div class="absolute inset-0 bg-gradient-to-br from-accent-purple/20 to-accent-purple/5 rounded-2xl blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
									<img src="/Images/fantom-08_lineup_top 1.png" alt="Roland FANTOM-08" class="relative w-full h-auto rounded-2xl shadow-2xl">
								</div>
							</div>
							
							<!-- Radar Chart -->
							<div class="piano-chart opacity-0 transform translate-x-[50px]">
								<div class="relative">
									<div class="radar-container-medium">
										<canvas id="fantomChart"></canvas>
									</div>
								</div>
							</div>
						</div>
						
						<!-- Performance Score Table -->
						<div class="piano-scores opacity-0 transform translate-y-[30px] flex justify-center">
							<div class="score-table-bg-fantom py-2 px-6 rounded-xl" style="box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1), 0 0 80px rgba(139, 92, 246, 0.1);">
								<div class="grid grid-cols-6 gap-4 max-w-2xl">
									<div class="text-center score-item">
										<div class="text-lg font-bold text-accent-purple mb-1">3.0</div>
										<div class="text-xs text-gray-400">タッチ</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold text-accent-purple mb-1">4.5</div>
										<div class="text-xs text-gray-400">音色</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold text-accent-purple mb-1">4.5</div>
										<div class="text-xs text-gray-400">機能</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold text-accent-purple mb-1">4.5</div>
										<div class="text-xs text-gray-400">拡張性</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold text-accent-purple mb-1">3.0</div>
										<div class="text-xs text-gray-400">携帯性</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold text-accent-purple mb-1">3.5</div>
										<div class="text-xs text-gray-400">コスパ</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</section>

				<!-- FP-90x Section -->
				<section id="fp90x" class="section-content absolute inset-0 flex items-center">
					<div class="absolute inset-0 bg-gradient-to-br from-accent-cyan/10 to-dark-bg"></div>
					<div class="fp90x-world-ambience"></div>
					<div class="noise-overlay"></div>
					<div class="fp90x-highlight"></div>
					<div class="max-w-7xl mx-auto px-6 lg:px-8 w-full h-full flex flex-col justify-center">
						<!-- Header -->
						<div class="piano-header opacity-0 transform translate-y-[30px] mb-6 mt-12 max-w-4xl">
							<div class="text-accent-cyan text-xs font-medium tracking-wider uppercase mb-1">Digital Piano</div>
							<h3 class="text-3xl md:text-4xl font-bold mb-2">
								FP-<span class="fp90x-gradient-text">90x</span>
							</h3>
							<p class="text-base text-accent-cyan font-medium">
								自宅から小ライブまで幅広く対応
							</p>
						</div>
						
						<!-- Main Content -->
						<div class="grid lg:grid-cols-2 gap-16 items-center mb-8">
							<!-- Piano Image -->
							<div class="piano-image opacity-0 transform translate-x-[-50px]">
								<div class="relative group">
									<div class="absolute inset-0 bg-gradient-to-br from-accent-cyan/20 to-accent-cyan/5 rounded-2xl blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
									<img src="/Images/lineup_fp-90x 1.png" alt="Roland FP-90x" class="relative w-full h-auto rounded-2xl shadow-2xl">
								</div>
							</div>
							
							<!-- Radar Chart -->
							<div class="piano-chart opacity-0 transform translate-x-[50px]">
								<div class="relative">
									<div class="radar-container-medium">
										<canvas id="fp90xChart"></canvas>
									</div>
								</div>
							</div>
						</div>
						
						<!-- Performance Score Table -->
						<div class="piano-scores opacity-0 transform translate-y-[30px] flex justify-center">
							<div class="score-table-bg-fp90x py-2 px-6 rounded-xl" style="box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1), 0 0 80px rgba(6, 182, 212, 0.1);">
								<div class="grid grid-cols-6 gap-4 max-w-2xl">
									<div class="text-center score-item">
										<div class="text-lg font-bold text-accent-cyan mb-1">5.0</div>
										<div class="text-xs text-gray-400">タッチ</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold text-accent-cyan mb-1">2.5</div>
										<div class="text-xs text-gray-400">音色</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold text-accent-cyan mb-1">3.5</div>
										<div class="text-xs text-gray-400">機能</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold text-accent-cyan mb-1">2.5</div>
										<div class="text-xs text-gray-400">拡張性</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold text-accent-cyan mb-1">5.0</div>
										<div class="text-xs text-gray-400">携帯性</div>
									</div>
									<div class="text-center score-item">
										<div class="text-lg font-bold text-accent-cyan mb-1">4.0</div>
										<div class="text-xs text-gray-400">コスパ</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</section>

				<!-- Comparison Section -->
				<section id="comparison" class="section-content absolute inset-0 flex items-center justify-center px-6">
					<div class="absolute inset-0 bg-gradient-to-br from-dark-bg via-dark-card to-dark-bg"></div>
					<div class="absolute inset-0 opacity-10">
						<div class="absolute top-10 left-10 w-64 h-64 bg-gradient-to-r from-accent-blue to-accent-purple rounded-full blur-3xl"></div>
						<div class="absolute bottom-10 right-10 w-80 h-80 bg-gradient-to-r from-accent-purple to-accent-cyan rounded-full blur-3xl"></div>
					</div>
					<div class="relative w-full max-w-7xl mx-auto text-center">
						<h2 class="text-5xl md:text-6xl font-light mb-8 gradient-text opacity-0" style="transform: translateY(30px);">
							総合比較
						</h2>
						<p class="text-xl text-gray-300 mb-12 opacity-0" style="transform: translateY(30px);">
							3つのRolandキーボードの性能を詳細に比較
						</p>
						<div class="glass-card rounded-2xl p-8 opacity-0" style="transform: translateY(30px);">
							<div class="radar-container">
								<canvas id="comparisonChart"></canvas>
							</div>
						</div>
					</div>
				</section>

			</div>
		</div>

		<!-- Section Indicators -->
		<div class="fixed right-6 top-1/2 transform -translate-y-1/2 z-40 space-y-4">
			<div class="indicator-dot active" data-section="0"></div>
			<div class="indicator-dot" data-section="1"></div>
			<div class="indicator-dot" data-section="2"></div>
			<div class="indicator-dot" data-section="3"></div>
			<div class="indicator-dot" data-section="4"></div>
		</div>

		<script>
			// Global variables
			let currentSection = 0;
			let isScrolling = false;
			const sections = ['hero', 'rd2000', 'fantom', 'fp90x', 'comparison'];
			
			// Piano data for charts
			const pianoData = {
				rd2000: {
					label: 'RD-2000',
					data: [5.5, 4.5, 4.0, 3.5, 3.0, 3.0],
					color: '#ef4444'
				},
				fantom: {
					label: 'FANTOM-08',
					data: [3.0, 4.5, 4.5, 4.5, 3.0, 3.5],
					color: '#8b5cf6'
				},
				fp90x: {
					label: 'FP-90x',
					data: [5.0, 2.5, 3.5, 2.5, 5.0, 4.0],
					color: '#06b6d4'
				}
			};

			const chartLabels = ['タッチ', '音色', '機能', '拡張性', '携帯性', 'コスパ'];

			// Initialize hero animations
			function initHeroAnimations() {
				const heroElements = [
					{ selector: '.hero-title', delay: 0 },
					{ selector: '.hero-subtitle', delay: 200 },
					{ selector: '.hero-cards', delay: 400 },
					{ selector: '.hero-scroll-indicator', delay: 600 }
				];

				heroElements.forEach(({ selector, delay }) => {
					const element = document.querySelector(selector) as HTMLElement;
					if (element) {
						setTimeout(() => {
							element.style.transition = 'all 1.2s cubic-bezier(0.4, 0, 0.2, 1)';
							element.style.opacity = '1';
							element.style.transform = 'translateY(0)';
						}, delay);
					}
				});
			}

			// Reset animations for re-execution
			function resetAnimations(section: string) {
				if (section === 'hero') {
					const heroElements = document.querySelectorAll('.hero-title, .hero-subtitle, .hero-cards, .hero-button');
					heroElements.forEach((el: Element) => {
						const htmlEl = el as HTMLElement;
						htmlEl.style.opacity = '0';
						htmlEl.style.transform = 'translateY(30px)';
						htmlEl.style.transition = 'none';
					});
				} else if (section === 'comparison') {
					// Reset comparison chart
					resetChartAnimation('comparisonChart');
					
					const sectionEl = document.getElementById(section);
					if (sectionEl) {
						const comparisonElements = sectionEl.querySelectorAll('.opacity-0');
						comparisonElements.forEach((el: Element) => {
							const htmlEl = el as HTMLElement;
							htmlEl.style.opacity = '0';
							htmlEl.style.transform = 'translateY(30px)';
							htmlEl.style.transition = 'none';
						});
					}
				} else {
					// Piano sections - reset chart animations
					const chartMap: { [key: string]: string } = {
						'rd2000': 'rd2000Chart',
						'fantom': 'fantomChart',
						'fp90x': 'fp90xChart'
					};
					
					if (chartMap[section]) {
						resetChartAnimation(chartMap[section]);
					}
					
					const sectionEl = document.getElementById(section);
					if (sectionEl) {
						const headerEl = sectionEl.querySelector('.piano-header') as HTMLElement;
						const imageEl = sectionEl.querySelector('.piano-image') as HTMLElement;
						const chartEl = sectionEl.querySelector('.piano-chart') as HTMLElement;
						const scoresEl = sectionEl.querySelector('.piano-scores') as HTMLElement;
						
						if (headerEl) {
							headerEl.style.opacity = '0';
							headerEl.style.transform = 'translateY(30px)';
							headerEl.style.transition = 'none';
						}
						
						if (imageEl) {
							imageEl.style.opacity = '0';
							imageEl.style.transform = 'translateX(-50px)';
							imageEl.style.transition = 'none';
						}
						
						if (chartEl) {
							chartEl.style.opacity = '0';
							chartEl.style.transform = 'translateX(50px)';
							chartEl.style.transition = 'none';
						}
						
						if (scoresEl) {
							scoresEl.style.opacity = '0';
							scoresEl.style.transform = 'translateY(30px)';
							scoresEl.style.transition = 'none';
						}
					}
				}
			}

			// Show specific section
			function showSection(index: number) {
				if (index === currentSection) return;
				
				// Hide all sections
				document.querySelectorAll('.section-content').forEach(section => {
					section.classList.remove('active');
				});
				
				// Show target section
				const targetSection = sections[index];
				const sectionElement = document.getElementById(targetSection);
				if (sectionElement) {
					sectionElement.classList.add('active');
				}
				
				// Update indicators
				document.querySelectorAll('.indicator-dot').forEach((dot, i) => {
					dot.classList.toggle('active', i === index);
				});
				
				// Update progress bar
				const progress = (index / (sections.length - 1)) * 100;
				const progressBar = document.getElementById('progress-bar');
				if (progressBar) {
					progressBar.style.width = `${progress}%`;
				}
				
				// Reset and trigger animations
				resetAnimations(targetSection);
				
				setTimeout(() => {
					triggerSectionAnimation(targetSection);
				}, 50);
				
				currentSection = index;
			}

			// Trigger section animations
			function triggerSectionAnimation(sectionName: string) {
				const section = document.getElementById(sectionName);
				if (!section) return;

				if (sectionName === 'hero') {
					initHeroAnimations();
				} else if (sectionName === 'comparison') {
					// Comparison section animations
					const elements = section.querySelectorAll('.opacity-0');
					elements.forEach((el, i) => {
						setTimeout(() => {
							const htmlEl = el as HTMLElement;
							htmlEl.style.transition = 'all 1.2s cubic-bezier(0.4, 0, 0.2, 1)';
							htmlEl.style.opacity = '1';
							htmlEl.style.transform = 'translateX(0) translateY(0)';
							
							// Trigger comparison chart animation on last element
							if (i === elements.length - 1) {
								setTimeout(() => {
									animateComparisonChart();
								}, 500);
							}
						}, i * 300);
					});
				} else {
					// Piano section animations
					const headerEl = section.querySelector('.piano-header') as HTMLElement;
					const imageEl = section.querySelector('.piano-image') as HTMLElement;
					const chartEl = section.querySelector('.piano-chart') as HTMLElement;
					const scoresEl = section.querySelector('.piano-scores') as HTMLElement;
					
					// Chart animation mapping
					const chartMap: { [key: string]: string } = {
						'rd2000': 'rd2000Chart',
						'fantom': 'fantomChart',
						'fp90x': 'fp90xChart'
					};
					
					// Staggered animations
					if (headerEl) {
						setTimeout(() => {
							headerEl.style.transition = 'all 1.2s cubic-bezier(0.4, 0, 0.2, 1)';
							headerEl.style.opacity = '1';
							headerEl.style.transform = 'translateY(0)';
						}, 100);
					}
					
					if (imageEl) {
						setTimeout(() => {
							imageEl.style.transition = 'all 1.2s cubic-bezier(0.4, 0, 0.2, 1)';
							imageEl.style.opacity = '1';
							imageEl.style.transform = 'translateX(0)';
						}, 300);
					}
					
					if (chartEl) {
						setTimeout(() => {
							chartEl.style.transition = 'all 1.2s cubic-bezier(0.4, 0, 0.2, 1)';
							chartEl.style.opacity = '1';
							chartEl.style.transform = 'translateX(0)';
							
							// Trigger chart animation
							if (chartMap[sectionName]) {
								animateChart(chartMap[sectionName]);
							}
						}, 500);
					}
					
					if (scoresEl) {
						setTimeout(() => {
							scoresEl.style.transition = 'all 1.2s cubic-bezier(0.4, 0, 0.2, 1)';
							scoresEl.style.opacity = '1';
							scoresEl.style.transform = 'translateY(0)';
						}, 700);
					}
				}
			}

			// Handle scroll events
			function handleScroll(event: WheelEvent) {
				if (isScrolling) return;
				
				isScrolling = true;
				
				if (event.deltaY > 0) {
					// Scroll down
					if (currentSection < sections.length - 1) {
						showSection(currentSection + 1);
					}
				} else {
					// Scroll up
					if (currentSection > 0) {
						showSection(currentSection - 1);
					}
				}
				
				setTimeout(() => {
					isScrolling = false;
				}, 1000);
			}

			// Initialize function
			function init() {
				// Initialize hero animations
				initHeroAnimations();
				
				// Create individual charts
				createChart('rd2000Chart', pianoData.rd2000);
				createChart('fantomChart', pianoData.fantom);
				createChart('fp90xChart', pianoData.fp90x);
				
				// Comparison chart
				const comparisonCanvas = document.getElementById('comparisonChart') as HTMLCanvasElement;
				if (comparisonCanvas) {
					const ctx = comparisonCanvas.getContext('2d');
					if (ctx) {
						// @ts-ignore
						const comparisonChart = new Chart(ctx, {
							type: 'radar',
							data: {
								labels: chartLabels,
								datasets: [
									{
										label: pianoData.rd2000.label,
										data: [0, 0, 0, 0, 0, 0],
										borderColor: pianoData.rd2000.color,
										backgroundColor: pianoData.rd2000.color + '15',
										borderWidth: 2,
										pointBackgroundColor: 'transparent',
										pointBorderColor: 'transparent',
										pointRadius: 0,
										pointBorderWidth: 0,
										pointHoverRadius: 0,
										pointHoverBorderWidth: 0,
										tension: 0
									},
									{
										label: pianoData.fantom.label,
										data: [0, 0, 0, 0, 0, 0],
										borderColor: pianoData.fantom.color,
										backgroundColor: pianoData.fantom.color + '15',
										borderWidth: 2,
										pointBackgroundColor: 'transparent',
										pointBorderColor: 'transparent',
										pointRadius: 0,
										pointBorderWidth: 0,
										pointHoverRadius: 0,
										pointHoverBorderWidth: 0,
										tension: 0
									},
									{
										label: pianoData.fp90x.label,
										data: [0, 0, 0, 0, 0, 0],
										borderColor: pianoData.fp90x.color,
										backgroundColor: pianoData.fp90x.color + '15',
										borderWidth: 2,
										pointBackgroundColor: 'transparent',
										pointBorderColor: 'transparent',
										pointRadius: 0,
										pointBorderWidth: 0,
										pointHoverRadius: 0,
										pointHoverBorderWidth: 0,
										tension: 0
									}
								]
							},
							options: {
								responsive: true,
								maintainAspectRatio: false,
								animation: {
									duration: 2500,
									easing: 'easeOutCubic'
								},
								plugins: {
									legend: {
										labels: {
											color: '#ffffff',
											font: {
												size: 14,
												family: 'Noto Sans JP',
												weight: '500'
											},
											padding: 20,
											usePointStyle: true,
											pointStyle: 'circle'
										}
									}
								},
								scales: {
									r: {
										beginAtZero: true,
										max: 5.0,
										ticks: {
											stepSize: 1,
											color: '#6b7280',
											backdropColor: 'transparent',
											font: {
												size: 11
											},
											showLabelBackdrop: false
										},
										grid: {
											color: '#374151',
											lineWidth: 1
										},
										angleLines: {
											color: '#374151',
											lineWidth: 1
										},
										pointLabels: {
											color: '#d1d5db',
											font: {
												size: 13,
												family: 'Noto Sans JP',
												weight: '500'
											}
										}
									}
								},
								interaction: {
									intersect: false
								}
							}
						});

						// Store comparison chart for later animation
						chartInstances['comparisonChart'] = {
							chart: comparisonChart,
							originalData: [pianoData.rd2000.data, pianoData.fantom.data, pianoData.fp90x.data],
							isAnimated: false
						};
					}
				}
			}

			// Store chart instances for animation control
			const chartInstances: { [key: string]: any } = {};

			// Create individual chart
			function createChart(canvasId: string, data: any) {
				const canvas = document.getElementById(canvasId) as HTMLCanvasElement;
				if (canvas) {
					const ctx = canvas.getContext('2d');
					if (ctx) {
						// Enhanced styling based on reference images
						const chartConfig = {
							type: 'radar',
							data: {
								labels: chartLabels,
								datasets: [{
									label: data.label,
									data: [0, 0, 0, 0, 0, 0], // Start from 0 for data animation
									borderColor: data.color,
									backgroundColor: data.color + '20',
									borderWidth: 2,
									pointBackgroundColor: 'transparent',
									pointBorderColor: 'transparent',
									pointRadius: 0,
									pointBorderWidth: 0,
									pointHoverRadius: 0,
									pointHoverBorderWidth: 0,
									tension: 0, // Remove tension for sharp lines
									fill: true
								}]
							},
							options: {
								responsive: true,
								maintainAspectRatio: false,
								animation: {
									duration: 0, // Disable default animation
									easing: 'easeOutCubic'
								},
								plugins: {
									legend: {
										display: false
									}
								},
								scales: {
									r: {
										beginAtZero: true,
										max: 5.0,
										ticks: {
											stepSize: 1,
											color: '#6b7280',
											backdropColor: 'transparent',
											font: {
												size: 10
											},
											showLabelBackdrop: false,
											display: true
										},
										grid: {
											color: '#374151',
											lineWidth: 1
										},
										angleLines: {
											color: '#374151',
											lineWidth: 1
										},
										pointLabels: {
											color: '#d1d5db',
											font: {
												size: 12,
												family: 'Noto Sans JP',
												weight: '500'
											}
										}
									}
								},
								interaction: {
									intersect: false
								}
							}
						};

						// @ts-ignore
						const chart = new Chart(ctx, chartConfig);
						
						// Store chart instance
						chartInstances[canvasId] = {
							chart: chart,
							originalData: data.data,
							isAnimated: false
						};

						return chart;
					}
				}
			}

			// Animate chart when section becomes active
			function animateChart(canvasId: string) {
				const chartInstance = chartInstances[canvasId];
				if (chartInstance && !chartInstance.isAnimated) {
					const chart = chartInstance.chart;
					const originalData = chartInstance.originalData;
					
					// Custom data animation
					const animationDuration = 1500;
					const startTime = Date.now();
					
					function animate() {
						const elapsed = Date.now() - startTime;
						const progress = Math.min(elapsed / animationDuration, 1);
						
						// Easing function (easeOutCubic)
						const easeProgress = 1 - Math.pow(1 - progress, 3);
						
						// Update data points
						chart.data.datasets[0].data = originalData.map((value: number) => value * easeProgress);
						chart.update('none');
						
						if (progress < 1) {
							requestAnimationFrame(animate);
						} else {
							chartInstance.isAnimated = true;
						}
					}
					
					// Start animation after a delay
					setTimeout(() => {
						animate();
					}, 300);
				}
			}

			// Reset chart animation state
			function resetChartAnimation(canvasId: string) {
				const chartInstance = chartInstances[canvasId];
				if (chartInstance) {
					// Reset data to zeros
					if (canvasId === 'comparisonChart') {
						chartInstance.chart.data.datasets[0].data = [0, 0, 0, 0, 0, 0];
						chartInstance.chart.data.datasets[1].data = [0, 0, 0, 0, 0, 0];
						chartInstance.chart.data.datasets[2].data = [0, 0, 0, 0, 0, 0];
					} else {
						chartInstance.chart.data.datasets[0].data = [0, 0, 0, 0, 0, 0];
					}
					chartInstance.chart.update('none');
					chartInstance.isAnimated = false;
				}
			}

			// Animate comparison chart
			function animateComparisonChart() {
				const chartInstance = chartInstances['comparisonChart'];
				if (chartInstance && !chartInstance.isAnimated) {
					const chart = chartInstance.chart;
					const originalData = chartInstance.originalData;
					
					// Custom data animation
					const animationDuration = 2000;
					const startTime = Date.now();
					
					function animate() {
						const elapsed = Date.now() - startTime;
						const progress = Math.min(elapsed / animationDuration, 1);
						
						// Easing function (easeOutCubic)
						const easeProgress = 1 - Math.pow(1 - progress, 3);
						
						// Update data points for all datasets
						chart.data.datasets[0].data = originalData[0].map((value: number) => value * easeProgress);
						chart.data.datasets[1].data = originalData[1].map((value: number) => value * easeProgress);
						chart.data.datasets[2].data = originalData[2].map((value: number) => value * easeProgress);
						chart.update('none');
						
						if (progress < 1) {
							requestAnimationFrame(animate);
						} else {
							chartInstance.isAnimated = true;
						}
					}
					
					// Start animation
					animate();
				}
			}

			// Navigation button handlers
			document.querySelectorAll('.nav-btn').forEach((btn, index) => {
				btn.addEventListener('click', () => {
					showSection(index);
				});
			});

			// Indicator dot handlers
			document.querySelectorAll('.indicator-dot').forEach((dot, index) => {
				dot.addEventListener('click', () => {
					showSection(index);
				});
			});

			// Piano preview card handlers
			document.querySelectorAll('.piano-preview').forEach((card) => {
				card.addEventListener('click', () => {
					const target = card.getAttribute('data-target');
					const targetIndex = sections.indexOf(target || '');
					if (targetIndex !== -1) {
						showSection(targetIndex);
					}
				});
			});

			// Scroll indicator
			const scrollIndicator = document.querySelector('.scroll-indicator-container');
			if (scrollIndicator) {
				scrollIndicator.addEventListener('click', () => {
					showSection(1);
				});
			}

			// Wheel event listener
			document.addEventListener('wheel', handleScroll, { passive: false });

			// Touch events for mobile
			let touchStartY = 0;
			document.addEventListener('touchstart', (e) => {
				touchStartY = e.touches[0].clientY;
			});

			document.addEventListener('touchend', (e) => {
				const touchEndY = e.changedTouches[0].clientY;
				const diff = touchStartY - touchEndY;
				
				if (Math.abs(diff) > 50) {
					if (diff > 0) {
						// Swipe up - next section
						if (currentSection < sections.length - 1) {
							showSection(currentSection + 1);
						}
					} else {
						// Swipe down - previous section
						if (currentSection > 0) {
							showSection(currentSection - 1);
						}
					}
				}
			});

			// Keyboard navigation
			document.addEventListener('keydown', (e) => {
				if (e.key === 'ArrowDown' && currentSection < sections.length - 1) {
					showSection(currentSection + 1);
				} else if (e.key === 'ArrowUp' && currentSection > 0) {
					showSection(currentSection - 1);
				}
			});

			// Initialize on load
			window.addEventListener('load', init);
		</script>
	</body>
</html>

